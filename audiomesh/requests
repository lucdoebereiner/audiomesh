# -*- mode: restclient; url-max-redirections: 0 -*-
# Emacs restclient examples for httpbin.org
# http://httpbin.org/: HTTP Request & Response Service

# MISSING set weight

# randomize graph
POST http://localhost:8008/randomize

# get graph
GET http://localhost:8008/graph

# post graph
POST http://localhost:8008/graph
Content-Type: application/json
{
  "nodes": [
    {
      "feedback_delay": false,
      "process": {
        "Ring": {
        }
      },
      "value": null,
      "sum_inputs": true,
      "clip": "None"
    },
    {
      "feedback_delay": false,
      "process": {
        "Constant": {
          "value": 0.5
        }
      },
      "value": null,
      "sum_inputs": true,
      "clip": "None"
    },
    {
      "feedback_delay": false,
      "process": {
        "Constant": {
          "value": 1.0
        }
      },
      "value": null,
      "sum_inputs": true,
      "clip": "None"
    },
    {
      "feedback_delay": false,
      "process": {
        "SinOsc": {
          "freq": 100.0
        }
      },
      "value": null,
      "sum_inputs": true,
      "clip": "None"
    }
  ],
  "node_holes": [],
  "edge_property": "directed",
  "edges": [
    [
      1,
      0,
      [
        0,
        1.0
      ]
    ],
    [
      2,
      0,
      [
        0,
        1.0
      ]
    ],
    [
      3,
      0,
      [
        0,
        1.0
      ]
    ]
  ]
}

# get outputs
#GET http://localhost:8008/outputs

# set solo output
POST http://localhost:8008/output/0/node/0/amp/0.5

# set multiple outputs
POST http://localhost:8008/outputs
Content-Type: application/json
[
{
  "node": 0,
  "output": 0,
  "amp": 1.0
},
{
  "node": 1,
  "output": 1,
  "amp": 1.0
}
]


# remove node
DELETE http://localhost:8008/node/3

# remove edge
DELETE http://localhost:8008/edge/10

# set volume
POST http://localhost:8008/volume/0.0

# connect least connected
POST http://localhost:8008/connectleastconnected

# disconnect least connected
POST http://localhost:8008/disconnectmostconnected

# set parameter
POST http://localhost:8008/node/5/parameter/1/3000.1

# set parameter
POST http://localhost:8008/node/2/parameter/1/50

# poll node
GET http://localhost:8008/node/0/poll


# testing processes SIN
POST http://localhost:8008/node
Content-Type: application/json
{
"Sin": {
  "mul": 1
}
}

# testing processes SINOSC
POST http://localhost:8008/node
Content-Type: application/json
{
"SinOsc": {
  "freq": 100.1
  }
}

# testing processes Mul
POST http://localhost:8008/node
Content-Type: application/json
{
"Mul": {
  }
}

# add
POST http://localhost:8008/node
Content-Type: application/json
{
"Add": {
  }
}

# mem
POST http://localhost:8008/node
Content-Type: application/json
{
"Mem": {
       "last_value" : 0.5
  }
}


# square
POST http://localhost:8008/node
Content-Type: application/json
{
"Square": {
  }
}


# sqrt
POST http://localhost:8008/node
Content-Type: application/json
{
"Sqrt": {
  }
}


# add node
POST http://localhost:8008/node
Content-Type: application/json
{
"SoundIn": {
  "index": 1
}
}

# constant
POST http://localhost:8008/node
Content-Type: application/json
{
"Constant": {
    "value": 1.7 
  }
}


# filter
POST http://localhost:8008/node
Content-Type: application/json
{
"Filter": {
          "filter_type": "BHPF",
          "freq": 600.0,
          "q": 8.0
        }

}


# wrap
POST http://localhost:8008/node
Content-Type: application/json
{
"Wrap": {
          "lo": 0.5,
          "hi": 2.0
        }

}


# softclip
POST http://localhost:8008/node
Content-Type: application/json
{
"Softclip": {
        }

}

# delay
POST http://localhost:8008/node
Content-Type: application/json
{
"Delay": {
 "input": 4000
     }

}

# bitneg
POST http://localhost:8008/node
Content-Type: application/json
{
"BitNeg": {
     }

}

# gauss
POST http://localhost:8008/node
Content-Type: application/json
{
"Gauss": {
     }

}

# rms
POST http://localhost:8008/node
Content-Type: application/json
{
"RMS": {
     }

}


# rms
POST http://localhost:8008/node
Content-Type: application/json
{
"LinCon": {
  "lincon_a": 1,
  "lincon_b": 10
    }

}
